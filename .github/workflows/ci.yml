name: CI

on:
  push:
    branches: [ master ]
    paths-ignore:
    - 'README.md'
    - 'LICENSE'
    - '.gitignore'
    - 'codecov.yml'
    - '.python-version'
    - 'poetry.toml'
    - '.github/workflows/cd.yml'
  pull_request:
    branches: [ master ]
    paths-ignore:
    - 'README.md'
    - 'LICENSE'
    - '.gitignore'
    - 'codecov.yml'
    - '.python-version'
    - 'poetry.toml'
    - '.github/workflows/cd.yml'
  workflow_dispatch:
  schedule:
  - cron: '30 5 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2
      with:
        python-version: "3.7"
    - name: Install pre-commit
      run: |
        pip install pre-commit==2.9.2
    - name: Run pre-commit
      run: |
        pre-commit install
        pre-commit run --all-files
  poetry-update:
    runs-on: ubuntu-22.04
    needs: pre-commit
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2
      with:
        python-version: "3.7"
    - uses: snok/install-poetry@v1.3.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Update lock file for dependencies
      run: |
        poetry update --with dev,pdf
    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: update Poetry lock with "dev" and "pdf" dependencies
        file_pattern: 'poetry.lock'
  unit-test:
    runs-on: ${{ matrix.os }}
    needs: poetry-update
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-22.04, windows-2022, macos-13]
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: snok/install-poetry@v1.3.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Load cached venv
      id: cached-pip-wheels
      uses: actions/cache@v3
      with:
        path: ~/.cache
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root --with dev,pdf
    - name: Install library
      run: poetry install --no-interaction
    - run: |
        source $VENV
        pytest --version
    - name: Run unit tests and Codecov
      run: poetry run pytest -n auto --cov=./ --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
  build:
    runs-on: ubuntu-22.04
    needs: unit-test
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2
      with:
        python-version: "3.7"
    - uses: snok/install-poetry@v1.3.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Build wheels
      run: |
        poetry build
    - name: Upload wheel and tar ball
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ./dist/*
  integration-test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-22.04, windows-2022, macos-13]
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheel and tar ball built previously
      uses: actions/download-artifact@master
      with:
        name: dist
        path: ./dist/
    - name: Install wheel
      run: |
        python -m pip install dist/cmdict-*py3-none-any.whl
    - name: Run module as script
      run: |
        python -m cmdict --help
    - name: Run module as executable
      run: |
        cmdict --help
